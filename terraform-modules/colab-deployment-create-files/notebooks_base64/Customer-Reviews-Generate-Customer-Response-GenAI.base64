{"commitMetadata": {"author": {"name": "Google Data Bean","emailAddress": "no-reply@google.com"},"commitMessage": "Committing Colab notebook"},"fileOperations": {"content.ipynb": {"writeFile": {"contents" : ""}}}}