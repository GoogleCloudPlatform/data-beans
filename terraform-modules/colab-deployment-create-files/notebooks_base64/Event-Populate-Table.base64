{"commitMetadata": {"author": {"name": "Google Data Bean","emailAddress": "no-reply@google.com"},"commitMessage": "Committing Colab notebook"},"fileOperations": {"content.ipynb": {"writeFile": {"contents" : "ewogICJjZWxscyI6IFsKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJtYXJrZG93biIsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAiazZlSXFlckZPenlqIgogICAgICB9LAogICAgICAic291cmNlIjogWwogICAgICAgICIjIyA8aW1nIHNyYz1cImh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9tVVRiTkszMmNfRFRTTnJocUVUVDVhUUpZRktvazJIQjFHMm5rMk1aSHZHNWJTczB2X2xtRG1fQXJXN3JnZDZTREdIWG8wQWsydUZGVTk2WDZYZDBHUT13MTYwLWgxMjhcIiB3aWR0aD1cIjQ1XCIgdmFsaWduPVwidG9wXCIgYWx0PVwiQmlnUXVlcnlcIj4gUG9wdWxhdGUgdGhlIEJpZ1F1ZXJ5IEV2ZW50IHRhYmxlXG4iCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJjZWxsX3R5cGUiOiAibWFya2Rvd24iLAogICAgICAibWV0YWRhdGEiOiB7fSwKICAgICAgInNvdXJjZSI6IFsKICAgICAgICAiIyMjIExpY2Vuc2UiCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJjZWxsX3R5cGUiOiAiY29kZSIsCiAgICAgICJleGVjdXRpb25fY291bnQiOiBudWxsLAogICAgICAibWV0YWRhdGEiOiB7fSwKICAgICAgIm91dHB1dHMiOiBbXSwKICAgICAgInNvdXJjZSI6IFsKICAgICAgICAiIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuIiwKICAgICAgICAiIyBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4iLAogICAgICAgICIjXG4iLAogICAgICAgICIjIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4iLAogICAgICAgICIjIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiIsCiAgICAgICAgIiMgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4iLAogICAgICAgICIjIFxuIiwKICAgICAgICAiIyAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuIiwKICAgICAgICAiIyBcbiIsCiAgICAgICAgIiMgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIiwKICAgICAgICAiIyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4iLAogICAgICAgICIjIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuIiwKICAgICAgICAiIyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4iLAogICAgICAgICIjIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuIiwKICAgICAgICAiIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMiCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJjZWxsX3R5cGUiOiAibWFya2Rvd24iLAogICAgICAibWV0YWRhdGEiOiB7fSwKICAgICAgInNvdXJjZSI6IFsKICAgICAgICAiIyMjIE5vdGVib29rIE92ZXJ2aWV3IgogICAgICBdCiAgICB9LAogICAgewogICAgICAiY2VsbF90eXBlIjogIm1hcmtkb3duIiwKICAgICAgIm1ldGFkYXRhIjoge30sCiAgICAgICJzb3VyY2UiOiBbCiAgICAgICAgIi0gVGhpcyBub3RlYm9vayB3aWxsIGRvd25sb2FkIHRoZSBjdXJyZW50IGRheSBldmVudHMgZnJvbSBHb29nbGUgRXZlbnRzIGZvciBlYWNoIGNpdHkuXG4iLAogICAgICAgICJcbiIsCiAgICAgICAgIi0gTm90ZWJvb2sgTG9naWM6XG4iLAogICAgICAgICIgICAgMS4gRm9yIGVhY2ggY2l0eVxuIiwKICAgICAgICAiICAgICAgICAtIEdldCBhIGxpc3Qgb2YgdGhlIGV2ZW50cyBcbiIsCiAgICAgICAgIiAgICAgICAgLSBBcHBlbmQgdGhpcyB0byBhbiBvdmVyYWxsIGxpc3RcbiIsCiAgICAgICAgIiAgICAyLiBCdWxrIGluc2VydCB0aGUgZGF0YSBpbnRvIEJpZ1F1ZXJ5XG4iLAogICAgICAgICIgICAgMy4gU2hvdyB0aGUgcmVzdWx0cyIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJtYXJrZG93biIsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAiMkZIdkQzZmZHNTJNIgogICAgICB9LAogICAgICAic291cmNlIjogWwogICAgICAgICIjIyBJbml0aWFsaXplIFB5dGhvbiIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJjb2RlIiwKICAgICAgImV4ZWN1dGlvbl9jb3VudCI6IG51bGwsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAiaC0zSUw1YUZQNkRsIgogICAgICB9LAogICAgICAib3V0cHV0cyI6IFtdLAogICAgICAic291cmNlIjogWwogICAgICAgICIjIFlvdSB3aWxsIG5lZWQgdG8gY3JlYXRlIGFuIGFjY291bnQgYW5kIHZlcmlmeSB5b3VyIGVtYWlsLlxuIiwKICAgICAgICAiIyBodHRwczovL3NlcnBhcGkuY29tL1xuIiwKICAgICAgICAiIyBZb3UgZ2V0IDEwMCBmcmVlIGNhbGxzIChwZXIgbW9udGgpXG4iLAogICAgICAgICJcbiIsCiAgICAgICAgInNlcnBhcGlfa2V5ID0gXCI8PEdldCB5b3VyIG93biBrZXk+PlwiIgogICAgICBdCiAgICB9LAogICAgewogICAgICAiY2VsbF90eXBlIjogImNvZGUiLAogICAgICAiZXhlY3V0aW9uX2NvdW50IjogbnVsbCwKICAgICAgIm1ldGFkYXRhIjogewogICAgICAgICJpZCI6ICJZOGxvUXVWMFh1MTAiCiAgICAgIH0sCiAgICAgICJvdXRwdXRzIjogW10sCiAgICAgICJzb3VyY2UiOiBbCiAgICAgICAgIiMgV2Ugd2lsbCBnZW5lcmF0ZSBldmVudHMgZm9yIGVhY2ggY2l0eSBmb3IgdGhlIG51bWJlciBvZiBkYXlzLiAgU2luY2Ugd2UgaGF2ZSA0IGNpdGVzIGFuZCAxMDAgZnJlZSBjYWxscywgeW91IG5lZWQgdG8gZG8gYXQgbW9zdCAyNSBkYXlzLlxuIiwKICAgICAgICAiIyBkYXRlOnRvZGF5IC0gVG9kYXkncyBFdmVudHNcbiIsCiAgICAgICAgIiMgZGF0ZTp0b21vcnJvdyAtIFRvbW9ycm93J3MgRXZlbnRzXG4iLAogICAgICAgICJodGljaGlwcyA9IFwiZGF0ZTp0b2RheVwiXG4iLAogICAgICAgICJcbiIsCiAgICAgICAgIiMgTm8gbmVlZCB0byBzZXQgdGhlc2VcbiIsCiAgICAgICAgImNpdHlfbmFtZXM9W1wiTmV3IFlvcmsgQ2l0eVwiLCBcIkxvbmRvblwiLCBcIlRva3lvXCIsIFwiU2FuIEZyYW5jaXNjb1wiXVxuIiwKICAgICAgICAiY2l0eV9pZHM9WzEsMiwzLDRdXG4iLAogICAgICAgICJjaXR5X3RpbWV6b25lcz1bXCJVUy9FYXN0ZXJuXCIsXCJFdXJvcGUvTG9uZG9uXCIsXCJBc2lhL1Rva3lvXCIsXCJVUy9QYWNpZmljXCJdXG4iLAogICAgICAgICJudW1iZXJfb2ZfY29mZmVlX3RydWNrcyA9IFwiNVwiIgogICAgICBdCiAgICB9LAogICAgewogICAgICAiY2VsbF90eXBlIjogImNvZGUiLAogICAgICAiZXhlY3V0aW9uX2NvdW50IjogbnVsbCwKICAgICAgIm1ldGFkYXRhIjogewogICAgICAgICJpZCI6ICIyRWZoQlVlbk84T0MiCiAgICAgIH0sCiAgICAgICJvdXRwdXRzIjogW10sCiAgICAgICJzb3VyY2UiOiBbCiAgICAgICAgImltcG9ydCBzeXNcbiIsCiAgICAgICAgIiF7c3lzLmV4ZWN1dGFibGV9IC1tIHBpcCBpbnN0YWxsIGdvb2dsZS1zZWFyY2gtcmVzdWx0cyIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJjb2RlIiwKICAgICAgImV4ZWN1dGlvbl9jb3VudCI6IG51bGwsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAiSFROUUtVTmFSc3lPIgogICAgICB9LAogICAgICAib3V0cHV0cyI6IFtdLAogICAgICAic291cmNlIjogWwogICAgICAgICJmcm9tIGdvb2dsZS5jbG91ZCBpbXBvcnQgYmlncXVlcnlcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiY2xpZW50ID0gYmlncXVlcnkuQ2xpZW50KCkiCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJjZWxsX3R5cGUiOiAibWFya2Rvd24iLAogICAgICAibWV0YWRhdGEiOiB7CiAgICAgICAgImlkIjogIktPWHBvZzgzUmxQRyIKICAgICAgfSwKICAgICAgInNvdXJjZSI6IFsKICAgICAgICAiIyMgQ3JlYXRlIHRoZSBHZW5BSSBJbnNpZ2h0cyB0YWJsZSIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJjb2RlIiwKICAgICAgImV4ZWN1dGlvbl9jb3VudCI6IG51bGwsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAianJXdVdmVUNTWlV2IgogICAgICB9LAogICAgICAib3V0cHV0cyI6IFtdLAogICAgICAic291cmNlIjogWwogICAgICAgICIlJWJpZ3F1ZXJ5XG4iLAogICAgICAgICJDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBgZGF0YS1iZWFucy1kZW1vLW16YmVtbXA4c2UuZGF0YV9iZWFuc19jdXJhdGVkLmV2ZW50YFxuIiwKICAgICAgICAiLS1DUkVBVEUgT1IgUkVQTEFDRSBUQUJMRSBgZGF0YS1iZWFucy1kZW1vLW16YmVtbXA4c2UuZGF0YV9iZWFuc19jdXJhdGVkLmV2ZW50YCAtLSBvbmx5IHVzZSB0aGlzIGZvciBzdGFydGluZyBvdmVyXG4iLAogICAgICAgICIoXG4iLAogICAgICAgICIgICAgZXZlbnRfaWQgICAgICAgICAgSU5UICAgICBOT1QgTlVMTCBPUFRJT05TKGRlc2NyaXB0aW9uPVwiVGhlIHByaW1hcnkga2V5IG9mIHRoZSBldmVudC5cIiksXG4iLAogICAgICAgICIgICAgY2l0eV9pZCAgICAgICAgICAgSU5UICAgICBOT1QgTlVMTCBPUFRJT05TKGRlc2NyaXB0aW9uPVwiVGhlIGZvcmVpZ24ga2V5IG9mIHRoZSBjaXR5LlwiKSxcbiIsCiAgICAgICAgIiAgICBldmVudF90aXRsZSAgICAgICBTVFJJTkcgIE5PVCBOVUxMIE9QVElPTlMoZGVzY3JpcHRpb249XCJUaGUgdGl0bGUgb2YgdGhlIGV2ZW50LlwiKSxcbiIsCiAgICAgICAgIiAgICBldmVudF9kYXRlICAgICAgICBEQVRFICAgIE5PVCBOVUxMIE9QVElPTlMoZGVzY3JpcHRpb249XCJUaGUgZGF0ZSBvZiB0aGUgZXZlbnQuXCIpLFxuIiwKICAgICAgICAiICAgIGV2ZW50X3RpbWVfc3RyaW5nIFNUUklORyAgTk9UIE5VTEwgT1BUSU9OUyhkZXNjcmlwdGlvbj1cIlRoZSB0aW1lIChzdHJpbmcgdmFsdWUpICBvZiB0aGUgZXZlbnQuXCIpLFxuIiwKICAgICAgICAiICAgIGV2ZW50X3ZlbnVlICAgICAgIFNUUklORyAgTk9UIE5VTEwgT1BUSU9OUyhkZXNjcmlwdGlvbj1cIlRoZSB2ZW51ZSBvZiB0aGUgZXZlbnQuXCIpLFxuIiwKICAgICAgICAiICAgIGV2ZW50X3ZlbnVlX2xpbmsgIFNUUklORyAgTk9UIE5VTEwgT1BUSU9OUyhkZXNjcmlwdGlvbj1cIlRoZSBnZW5lcmF0ZWQgaW5zaWdodCBpbiB0ZXh0XCIpLFxuIiwKICAgICAgICAiICAgIGV2ZW50X2FkZHJlc3MgICAgIFNUUklORyAgTk9UIE5VTEwgT1BUSU9OUyhkZXNjcmlwdGlvbj1cIlRoZSBmdWxsIGFkZHJlc3Mgb2YgdGhlIGV2ZW50LlwiKSxcbiIsCiAgICAgICAgIiAgICBldmVudF9kZXNjcmlwdGlvbiBTVFJJTkcgIE5PVCBOVUxMIE9QVElPTlMoZGVzY3JpcHRpb249XCJUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGV2ZW50LlwiKSxcbiIsCiAgICAgICAgIiAgICBldmVudF9yZXZpZXdzICAgICBJTlQ2NCAgIE5PVCBOVUxMIE9QVElPTlMoZGVzY3JpcHRpb249XCJUaGUgbnVtYmVyIG9mIHJldmlld3Mgb2YgdGhlIGV2ZW50LlwiKSxcbiIsCiAgICAgICAgIiAgICBldmVudF90aHVtYm5haWwgICBTVFJJTkcgIE5PVCBOVUxMIE9QVElPTlMoZGVzY3JpcHRpb249XCJUaGUgdGh1bWJuYWlsIGltYWdlIGZvciB0aGUgZXZlbnQuXCIpXG4iLAogICAgICAgICIpXG4iLAogICAgICAgICJDTFVTVEVSIEJZIGV2ZW50X2lkOyIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJtYXJrZG93biIsCiAgICAgICJtZXRhZGF0YSI6IHt9LAogICAgICAic291cmNlIjogWwogICAgICAgICIjIyBTdXBwb3J0aW5nIEZ1bmN0aW9ucyIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJjb2RlIiwKICAgICAgImV4ZWN1dGlvbl9jb3VudCI6IG51bGwsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAiR1oxOHNsVUZScGpHIgogICAgICB9LAogICAgICAib3V0cHV0cyI6IFtdLAogICAgICAic291cmNlIjogWwogICAgICAgICJkZWYgUnVuUXVlcnkoc3FsKTpcbiIsCiAgICAgICAgIiAgaW1wb3J0IHRpbWVcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiICBpZiAoc3FsLnN0YXJ0c3dpdGgoXCJTRUxFQ1RcIikpOlxuIiwKICAgICAgICAiICAgICAgZGZfcmVzdWx0ID0gY2xpZW50LnF1ZXJ5KHNxbCkudG9fZGF0YWZyYW1lKClcbiIsCiAgICAgICAgIiAgICAgIHJldHVybiBkZl9yZXN1bHRcbiIsCiAgICAgICAgIiAgZWxzZTpcbiIsCiAgICAgICAgIiAgICBqb2JfY29uZmlnID0gYmlncXVlcnkuUXVlcnlKb2JDb25maWcocHJpb3JpdHk9YmlncXVlcnkuUXVlcnlQcmlvcml0eS5JTlRFUkFDVElWRSlcbiIsCiAgICAgICAgIiAgICBxdWVyeV9qb2IgPSBjbGllbnQucXVlcnkoc3FsLCBqb2JfY29uZmlnPWpvYl9jb25maWcpXG4iLAogICAgICAgICJcbiIsCiAgICAgICAgIiAgICAjIENoZWNrIG9uIHRoZSBwcm9ncmVzcyBieSBnZXR0aW5nIHRoZSBqb2IncyB1cGRhdGVkIHN0YXRlLlxuIiwKICAgICAgICAiICAgIHF1ZXJ5X2pvYiA9IGNsaWVudC5nZXRfam9iKFxuIiwKICAgICAgICAiICAgICAgICBxdWVyeV9qb2Iuam9iX2lkLCBsb2NhdGlvbj1xdWVyeV9qb2IubG9jYXRpb25cbiIsCiAgICAgICAgIiAgICApXG4iLAogICAgICAgICIgICAgcHJpbnQoXCJKb2Ige30gaXMgY3VycmVudGx5IGluIHN0YXRlIHt9IHdpdGggZXJyb3IgcmVzdWx0IG9mIHt9XCIuZm9ybWF0KHF1ZXJ5X2pvYi5qb2JfaWQsIHF1ZXJ5X2pvYi5zdGF0ZSwgcXVlcnlfam9iLmVycm9yX3Jlc3VsdCkpXG4iLAogICAgICAgICJcbiIsCiAgICAgICAgIiAgICB3aGlsZSBxdWVyeV9qb2Iuc3RhdGUgIT0gXCJET05FXCI6XG4iLAogICAgICAgICIgICAgICB0aW1lLnNsZWVwKDIpXG4iLAogICAgICAgICIgICAgICBxdWVyeV9qb2IgPSBjbGllbnQuZ2V0X2pvYihcbiIsCiAgICAgICAgIiAgICAgICAgICBxdWVyeV9qb2Iuam9iX2lkLCBsb2NhdGlvbj1xdWVyeV9qb2IubG9jYXRpb25cbiIsCiAgICAgICAgIiAgICAgICAgICApXG4iLAogICAgICAgICIgICAgICBwcmludChcIkpvYiB7fSBpcyBjdXJyZW50bHkgaW4gc3RhdGUge30gd2l0aCBlcnJvciByZXN1bHQgb2Yge31cIi5mb3JtYXQocXVlcnlfam9iLmpvYl9pZCwgcXVlcnlfam9iLnN0YXRlLCBxdWVyeV9qb2IuZXJyb3JfcmVzdWx0KSlcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiICAgIGlmIHF1ZXJ5X2pvYi5lcnJvcl9yZXN1bHQgPT0gTm9uZTpcbiIsCiAgICAgICAgIiAgICAgIHJldHVybiBUcnVlXG4iLAogICAgICAgICIgICAgZWxzZTpcbiIsCiAgICAgICAgIiAgICAgIHJldHVybiBGYWxzZSIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJjb2RlIiwKICAgICAgImV4ZWN1dGlvbl9jb3VudCI6IG51bGwsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAicU5VVzBNRmlVT0Z5IgogICAgICB9LAogICAgICAib3V0cHV0cyI6IFtdLAogICAgICAic291cmNlIjogWwogICAgICAgICJkZWYgR2V0TmV4dFByaW1hcnlLZXkoZnVsbHlfcXVhbGlmaWVkX3RhYmxlX25hbWUsIGZpZWxkX25hbWUpOlxuIiwKICAgICAgICAiICBzcWwgPSBmXCJcIlwiXG4iLAogICAgICAgICIgIFNFTEVDVCBJRk5VTEwoTUFYKHtmaWVsZF9uYW1lfSksMCkgQVMgcmVzdWx0XG4iLAogICAgICAgICIgICAgRlJPTSBge2Z1bGx5X3F1YWxpZmllZF90YWJsZV9uYW1lfWBcbiIsCiAgICAgICAgIiAgXCJcIlwiXG4iLAogICAgICAgICIgICMgcHJpbnQoc3FsKVxuIiwKICAgICAgICAiICBkZl9yZXN1bHQgPSBjbGllbnQucXVlcnkoc3FsKS50b19kYXRhZnJhbWUoKVxuIiwKICAgICAgICAiICAjIGRpc3BsYXkoZGZfcmVzdWx0KVxuIiwKICAgICAgICAiICByZXR1cm4gZGZfcmVzdWx0WydyZXN1bHQnXS5pbG9jWzBdICsgMSIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJtYXJrZG93biIsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAiWnJRX2dPZWJSMnZYIgogICAgICB9LAogICAgICAic291cmNlIjogWwogICAgICAgICIjIyBHZXQgdGhlIGxpc3Qgb2YgRXZlbnRzIgogICAgICBdCiAgICB9LAogICAgewogICAgICAiY2VsbF90eXBlIjogIm1hcmtkb3duIiwKICAgICAgIm1ldGFkYXRhIjoge30sCiAgICAgICJzb3VyY2UiOiBbCiAgICAgICAgIllvdSBjYW4gdXNlIGEgM3JkIHBhcnR5IHNlcnZpY2UgdG8gZG93bmxvYWQgdGhlIGV2ZW50c1xuIiwKICAgICAgICAiLSBodHRwczovL3NlcnBhcGkuY29tL2dvb2dsZS1ldmVudHMtYXBpXG4iLAogICAgICAgICItIGh0dHBzOi8vc2VycGFwaS5jb20vYmxvZy9zY3JhcGUtZ29vZ2xlLWV2ZW50cy1yZXN1bHRzLXdpdGgtcHl0aG9uLyIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJjb2RlIiwKICAgICAgImV4ZWN1dGlvbl9jb3VudCI6IG51bGwsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAia3VSX0RTeFBPMENSIgogICAgICB9LAogICAgICAib3V0cHV0cyI6IFtdLAogICAgICAic291cmNlIjogWwogICAgICAgICJmcm9tIHNlcnBhcGkgaW1wb3J0IEdvb2dsZVNlYXJjaFxuIiwKICAgICAgICAiZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZVxuIiwKICAgICAgICAiXG4iLAogICAgICAgICJldmVudF9pZCA9IEdldE5leHRQcmltYXJ5S2V5KFwiZGF0YS1iZWFucy1kZW1vLW16YmVtbXA4c2UuZGF0YV9iZWFuc19jdXJhdGVkLmV2ZW50XCIsXCJldmVudF9pZFwiKVxuIiwKICAgICAgICAicHJpbnQoZlwiZXZlbnRfaWQ6IHtldmVudF9pZH1cIilcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiZXZlbnRfZGF0ZSA9IGRhdGUudG9kYXkoKVxuIiwKICAgICAgICAiZXZlbnRfcmVjb3JkcyA9IFtdXG4iLAogICAgICAgICJcbiIsCiAgICAgICAgIiMgTG9vcCBmb3IgZWFjaCBjaXR5XG4iLAogICAgICAgICJmb3IgY2l0eV9pbmRleCBpbiByYW5nZSgwLCA0KTpcbiIsCiAgICAgICAgIiAgcHJpbnQoZlwiQ2l0eToge2NpdHlfaWRzW2NpdHlfaW5kZXhdfVwiKVxuIiwKICAgICAgICAiXG4iLAogICAgICAgICIgIGdvb2dsZV9ldmVudHNfcGFyYW1zID0ge1xuIiwKICAgICAgICAiICAgIFwiZW5naW5lXCI6IFwiZ29vZ2xlX2V2ZW50c1wiLFxuIiwKICAgICAgICAiICAgIFwicVwiOiBmXCJFdmVudHMgaW4ge2NpdHlfbmFtZXNbY2l0eV9pbmRleF19XCIsXG4iLAogICAgICAgICIgICAgXCJobFwiOiBcImVuXCIsXG4iLAogICAgICAgICIgICAgXCJnbFwiOiBcInVzXCIsXG4iLAogICAgICAgICIgICAgXCJhcGlfa2V5XCI6IGZcIntzZXJwYXBpX2tleX1cIixcbiIsCiAgICAgICAgIiAgICAnc3RhcnQnOiAwLFxuIiwKICAgICAgICAiICAgIFwiaHRpY2hpcHNcIiA6IGZcIntodGljaGlwc31cIlxuIiwKICAgICAgICAiICB9XG4iLAogICAgICAgICJcbiIsCiAgICAgICAgIiAgd2hpbGUgVHJ1ZTpcbiIsCiAgICAgICAgIiAgICAgIHNlYXJjaCA9IEdvb2dsZVNlYXJjaChnb29nbGVfZXZlbnRzX3BhcmFtcylcbiIsCiAgICAgICAgIiAgICAgIGV2ZW50X3NlYXJjaF9yZXN1bHRzID0gc2VhcmNoLmdldF9kaWN0KClcbiIsCiAgICAgICAgIiAgICAgIGlmICdlcnJvcicgaW4gZXZlbnRfc2VhcmNoX3Jlc3VsdHM6XG4iLAogICAgICAgICIgICAgICAgICAgYnJlYWtcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiICAgICAgZm9yIGl0ZW0gaW4gZXZlbnRfc2VhcmNoX3Jlc3VsdHNbXCJldmVudHNfcmVzdWx0c1wiXTpcbiIsCiAgICAgICAgIiAgICAgICAgICB0cnk6XG4iLAogICAgICAgICIgICAgICAgICAgICAgIGV2ZW50X3ZlbnVlID0gXCJcIlxuIiwKICAgICAgICAiICAgICAgICAgICAgICBhZGRyZXNzID0gXCJcIlxuIiwKICAgICAgICAiICAgICAgICAgICAgICBmb3IgYWRkcmVzc19pdGVtIGluIGl0ZW1bXCJhZGRyZXNzXCJdOlxuIiwKICAgICAgICAiICAgICAgICAgICAgICAgIGlmIGV2ZW50X3ZlbnVlID09IFwiXCI6XG4iLAogICAgICAgICIgICAgICAgICAgICAgICAgICBzcGxpdF90ZXh0ID0gYWRkcmVzc19pdGVtLnNwbGl0KFwiLCBcIilcbiIsCiAgICAgICAgIiAgICAgICAgICAgICAgICAgIGV2ZW50X3ZlbnVlID0gc3BsaXRfdGV4dFswXVxuIiwKICAgICAgICAiICAgICAgICAgICAgICAgICAgYWRkcmVzcyA9IHNwbGl0X3RleHRbMV1cbiIsCiAgICAgICAgIiAgICAgICAgICAgICAgICBlbHNlOlxuIiwKICAgICAgICAiICAgICAgICAgICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3MgKyBcIiBcIiArIGFkZHJlc3NfaXRlbVxuIiwKICAgICAgICAiXG4iLAogICAgICAgICIgICAgICAgICAgICAgICNwcmludChmXCJpdGVtOiB7aXRlbX1cIilcbiIsCiAgICAgICAgIiAgICAgICAgICAgICAgI3ByaW50KGZcImV2ZW50X3ZlbnVlOiB7ZXZlbnRfdmVudWV9XCIpXG4iLAogICAgICAgICIgICAgICAgICAgICAgICNwcmludChmXCJhZGRyZXNzOiB7YWRkcmVzc31cIilcbiIsCiAgICAgICAgIiAgICAgICAgICAgICAgI3ByaW50KFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpXG4iLAogICAgICAgICJcbiIsCiAgICAgICAgIiAgICAgICAgICAgICAgZXZlbnQgPSB7XG4iLAogICAgICAgICIgICAgICAgICAgICAgICAgICBcImV2ZW50X2lkXCIgOiBldmVudF9pZCxcbiIsCiAgICAgICAgIiAgICAgICAgICAgICAgICAgIFwiY2l0eV9pZFwiIDogY2l0eV9pZHNbY2l0eV9pbmRleF0sXG4iLAogICAgICAgICIgICAgICAgICAgICAgICAgICBcImV2ZW50X3RpdGxlXCIgOiBpdGVtWyd0aXRsZSddLFxuIiwKICAgICAgICAiICAgICAgICAgICAgICAgICAgXCJldmVudF9kYXRlXCIgOiBldmVudF9kYXRlLFxuIiwKICAgICAgICAiICAgICAgICAgICAgICAgICAgXCJldmVudF90aW1lX3N0cmluZ1wiIDogaXRlbVsnZGF0ZSddWyd3aGVuJ10sXG4iLAogICAgICAgICIgICAgICAgICAgICAgICAgICBcImV2ZW50X3ZlbnVlXCIgOiBldmVudF92ZW51ZSxcbiIsCiAgICAgICAgIiAgICAgICAgICAgICAgICAgIFwiZXZlbnRfdmVudWVfbGlua1wiIDogaXRlbVsndmVudWUnXVsnbGluayddLFxuIiwKICAgICAgICAiICAgICAgICAgICAgICAgICAgXCJldmVudF9hZGRyZXNzXCIgOiBhZGRyZXNzLFxuIiwKICAgICAgICAiICAgICAgICAgICAgICAgICAgXCJldmVudF9kZXNjcmlwdGlvblwiIDogaXRlbVsnZGVzY3JpcHRpb24nXSxcbiIsCiAgICAgICAgIiAgICAgICAgICAgICAgICAgIFwiZXZlbnRfcmV2aWV3c1wiIDogaXRlbVsndmVudWUnXVsncmV2aWV3cyddLFxuIiwKICAgICAgICAiICAgICAgICAgICAgICAgICAgXCJldmVudF90aHVtYm5haWxcIiA6IGl0ZW1bJ3RodW1ibmFpbCddXG4iLAogICAgICAgICIgICAgICAgICAgICAgIH1cbiIsCiAgICAgICAgIiAgICAgICAgICAgICAgZXZlbnRfaWQgPSBldmVudF9pZCArIDFcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiICAgICAgICAgICAgICBldmVudF9yZWNvcmRzLmFwcGVuZChldmVudClcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXJyb3I6XG4iLAogICAgICAgICIgICAgICAgICAgICAgIHByaW50KGZcImVycm9yOiB7ZXJyb3J9XCIpXG4iLAogICAgICAgICIgICAgICAgICAgICAgIHByaW50KGZcIml0ZW06IHtpdGVtfVwiKVxuIiwKICAgICAgICAiICAgICAgICAgICAgICBwcmludChmXCItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cIilcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiICAgICAgZ29vZ2xlX2V2ZW50c19wYXJhbXNbJ3N0YXJ0J10gKz0gMTBcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiICAgICAgaWYgZ29vZ2xlX2V2ZW50c19wYXJhbXNbJ3N0YXJ0J10gPiAzMDpcbiIsCiAgICAgICAgIiAgICAgICAgICBicmVhayAjIG9ubHkgZG8gMzAgZm9yIG5vdyBzbyBvdXIgcHJvbXB0IGlzIG5vdCB0b28gbGFyZ2UiCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJjZWxsX3R5cGUiOiAiY29kZSIsCiAgICAgICJleGVjdXRpb25fY291bnQiOiBudWxsLAogICAgICAibWV0YWRhdGEiOiB7CiAgICAgICAgImlkIjogInhVQnNPQzZCd3VYTCIKICAgICAgfSwKICAgICAgIm91dHB1dHMiOiBbXSwKICAgICAgInNvdXJjZSI6IFsKICAgICAgICAiZXZlbnRfcmVjb3JkcyIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJtYXJrZG93biIsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAiZm12VTNMdjlSNlRPIgogICAgICB9LAogICAgICAic291cmNlIjogWwogICAgICAgICIjIyBJbnNlcnQgdGhlIGV2ZW50cyAoaW4gYnVsaykiCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJjZWxsX3R5cGUiOiAiY29kZSIsCiAgICAgICJleGVjdXRpb25fY291bnQiOiBudWxsLAogICAgICAibWV0YWRhdGEiOiB7CiAgICAgICAgImlkIjogInNGdUxrODc1cWZQayIKICAgICAgfSwKICAgICAgIm91dHB1dHMiOiBbXSwKICAgICAgInNvdXJjZSI6IFsKICAgICAgICAiJSViaWdxdWVyeVxuIiwKICAgICAgICAiXG4iLAogICAgICAgICItLSByZW1vdmUgdGhlIGN1cnJlbnQgZGF5cyBldmVudHMgKGluIGNhc2UgeW91IHJlLXJ1biB0aGlzIG5vdGVib29rKVxuIiwKICAgICAgICAiREVMRVRFXG4iLAogICAgICAgICIgIEZST00gYGRhdGEtYmVhbnMtZGVtby1temJlbW1wOHNlLmRhdGFfYmVhbnNfY3VyYXRlZC5ldmVudGAgQVMgZXZlbnRcbiIsCiAgICAgICAgIiBXSEVSRSBldmVudF9kYXRlID0gQ1VSUkVOVF9EQVRFKCk7IgogICAgICBdCiAgICB9LAogICAgewogICAgICAiY2VsbF90eXBlIjogImNvZGUiLAogICAgICAiZXhlY3V0aW9uX2NvdW50IjogbnVsbCwKICAgICAgIm1ldGFkYXRhIjogewogICAgICAgICJpZCI6ICJBMkVBMlU4ZmVaamgiCiAgICAgIH0sCiAgICAgICJvdXRwdXRzIjogW10sCiAgICAgICJzb3VyY2UiOiBbCiAgICAgICAgImltcG9ydCBwYW5kYXMgYXMgcGRcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiIyBMb2FkIHRoZSBldmVudHMgdGFibGUgKGluIGJ1bGspXG4iLAogICAgICAgICJ0YWJsZV9pZCA9IFwiZGF0YS1iZWFucy1kZW1vLW16YmVtbXA4c2UuZGF0YV9iZWFuc19jdXJhdGVkLmV2ZW50XCJcbiIsCiAgICAgICAgIlxuIiwKICAgICAgICAiZGF0YWZyYW1lID0gcGQuRGF0YUZyYW1lKFxuIiwKICAgICAgICAiICAgIHBkLkRhdGFGcmFtZShldmVudF9yZWNvcmRzKSwgIyBZb3VyIHNvdXJjZSBkYXRhXG4iLAogICAgICAgICIgICAgY29sdW1ucz1bXG4iLAogICAgICAgICIgICAgICAgIFwiZXZlbnRfaWRcIixcbiIsCiAgICAgICAgIiAgICAgICAgXCJjaXR5X2lkXCIsXG4iLAogICAgICAgICIgICAgICAgIFwiZXZlbnRfdGl0bGVcIixcbiIsCiAgICAgICAgIiAgICAgICAgXCJldmVudF9kYXRlXCIsXG4iLAogICAgICAgICIgICAgICAgIFwiZXZlbnRfdGltZV9zdHJpbmdcIixcbiIsCiAgICAgICAgIiAgICAgICAgXCJldmVudF92ZW51ZVwiLFxuIiwKICAgICAgICAiICAgICAgICBcImV2ZW50X3ZlbnVlX2xpbmtcIixcbiIsCiAgICAgICAgIiAgICAgICAgXCJldmVudF9hZGRyZXNzXCIsXG4iLAogICAgICAgICIgICAgICAgIFwiZXZlbnRfZGVzY3JpcHRpb25cIixcbiIsCiAgICAgICAgIiAgICAgICAgXCJldmVudF9yZXZpZXdzXCIsXG4iLAogICAgICAgICIgICAgICAgIFwiZXZlbnRfdGh1bWJuYWlsXCJcbiIsCiAgICAgICAgIiAgICBdLFxuIiwKICAgICAgICAiKVxuIiwKICAgICAgICAiXG4iLAogICAgICAgICJqb2JfY29uZmlnID0gYmlncXVlcnkuTG9hZEpvYkNvbmZpZyhcbiIsCiAgICAgICAgIiAgICBzY2hlbWE9W1xuIiwKICAgICAgICAiICAgICAgICBiaWdxdWVyeS5TY2hlbWFGaWVsZChcImV2ZW50X2lkXCIsIGJpZ3F1ZXJ5LmVudW1zLlNxbFR5cGVOYW1lcy5JTlQ2NCwgbW9kZT1cIlJFUVVJUkVEXCIpLFxuIiwKICAgICAgICAiICAgICAgICBiaWdxdWVyeS5TY2hlbWFGaWVsZChcImNpdHlfaWRcIiwgYmlncXVlcnkuZW51bXMuU3FsVHlwZU5hbWVzLklOVDY0LCBtb2RlPVwiUkVRVUlSRURcIiksXG4iLAogICAgICAgICIgICAgICAgIGJpZ3F1ZXJ5LlNjaGVtYUZpZWxkKFwiZXZlbnRfdGl0bGVcIiwgYmlncXVlcnkuZW51bXMuU3FsVHlwZU5hbWVzLlNUUklORywgbW9kZT1cIlJFUVVJUkVEXCIpLFxuIiwKICAgICAgICAiICAgICAgICBiaWdxdWVyeS5TY2hlbWFGaWVsZChcImV2ZW50X2RhdGVcIiwgYmlncXVlcnkuZW51bXMuU3FsVHlwZU5hbWVzLkRBVEUsIG1vZGU9XCJSRVFVSVJFRFwiKSxcbiIsCiAgICAgICAgIiAgICAgICAgYmlncXVlcnkuU2NoZW1hRmllbGQoXCJldmVudF90aW1lX3N0cmluZ1wiLCBiaWdxdWVyeS5lbnVtcy5TcWxUeXBlTmFtZXMuU1RSSU5HLCBtb2RlPVwiUkVRVUlSRURcIiksXG4iLAogICAgICAgICIgICAgICAgIGJpZ3F1ZXJ5LlNjaGVtYUZpZWxkKFwiZXZlbnRfdmVudWVcIiwgYmlncXVlcnkuZW51bXMuU3FsVHlwZU5hbWVzLlNUUklORywgbW9kZT1cIlJFUVVJUkVEXCIpLFxuIiwKICAgICAgICAiICAgICAgICBiaWdxdWVyeS5TY2hlbWFGaWVsZChcImV2ZW50X3ZlbnVlX2xpbmtcIiwgYmlncXVlcnkuZW51bXMuU3FsVHlwZU5hbWVzLlNUUklORywgbW9kZT1cIlJFUVVJUkVEXCIpLFxuIiwKICAgICAgICAiICAgICAgICBiaWdxdWVyeS5TY2hlbWFGaWVsZChcImV2ZW50X2FkZHJlc3NcIiwgYmlncXVlcnkuZW51bXMuU3FsVHlwZU5hbWVzLlNUUklORywgbW9kZT1cIlJFUVVJUkVEXCIpLFxuIiwKICAgICAgICAiICAgICAgICBiaWdxdWVyeS5TY2hlbWFGaWVsZChcImV2ZW50X2Rlc2NyaXB0aW9uXCIsIGJpZ3F1ZXJ5LmVudW1zLlNxbFR5cGVOYW1lcy5TVFJJTkcsIG1vZGU9XCJSRVFVSVJFRFwiKSxcbiIsCiAgICAgICAgIiAgICAgICAgYmlncXVlcnkuU2NoZW1hRmllbGQoXCJldmVudF9yZXZpZXdzXCIsIGJpZ3F1ZXJ5LmVudW1zLlNxbFR5cGVOYW1lcy5JTlQ2NCwgbW9kZT1cIlJFUVVJUkVEXCIpLFxuIiwKICAgICAgICAiICAgICAgICBiaWdxdWVyeS5TY2hlbWFGaWVsZChcImV2ZW50X3RodW1ibmFpbFwiLCBiaWdxdWVyeS5lbnVtcy5TcWxUeXBlTmFtZXMuU1RSSU5HLCBtb2RlPVwiUkVRVUlSRURcIilcbiIsCiAgICAgICAgIiAgICBdLFxuIiwKICAgICAgICAiICAgIHdyaXRlX2Rpc3Bvc2l0aW9uPVwiV1JJVEVfQVBQRU5EXCIsXG4iLAogICAgICAgICIpXG4iLAogICAgICAgICJcbiIsCiAgICAgICAgImpvYiA9IGNsaWVudC5sb2FkX3RhYmxlX2Zyb21fZGF0YWZyYW1lKGRhdGFmcmFtZSwgdGFibGVfaWQsIGpvYl9jb25maWc9am9iX2NvbmZpZylcbiIsCiAgICAgICAgImpvYi5yZXN1bHQoKSAgIyBXYWl0IGZvciB0aGUgam9iIHRvIGNvbXBsZXRlLlxuIiwKICAgICAgICAiXG4iLAogICAgICAgICJ0YWJsZSA9IGNsaWVudC5nZXRfdGFibGUodGFibGVfaWQpICAjIE1ha2UgYW4gQVBJIHJlcXVlc3QuXG4iLAogICAgICAgICJwcmludChcIkxvYWRlZCB7fSByb3dzIGFuZCB7fSBjb2x1bW5zIHRvIHt9XCIuZm9ybWF0KHRhYmxlLm51bV9yb3dzLCBsZW4odGFibGUuc2NoZW1hKSwgdGFibGVfaWQpKSIKICAgICAgXQogICAgfSwKICAgIHsKICAgICAgImNlbGxfdHlwZSI6ICJtYXJrZG93biIsCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAiaWQiOiAiUGFtcFRmZ2RSZnFlIgogICAgICB9LAogICAgICAic291cmNlIjogWwogICAgICAgICIjIyBTZWUgdGhlIHJlc3VsdHMiCiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJjZWxsX3R5cGUiOiAiY29kZSIsCiAgICAgICJleGVjdXRpb25fY291bnQiOiBudWxsLAogICAgICAibWV0YWRhdGEiOiB7CiAgICAgICAgImlkIjogIlJDQ29nUGpGU1BITyIKICAgICAgfSwKICAgICAgIm91dHB1dHMiOiBbXSwKICAgICAgInNvdXJjZSI6IFsKICAgICAgICAiJSViaWdxdWVyeVxuIiwKICAgICAgICAiXG4iLAogICAgICAgICIjIERpc3BsYXkgdGhlIHJlc3VsdHNcbiIsCiAgICAgICAgIlNFTEVDVCAqXG4iLAogICAgICAgICIgIEZST00gYGRhdGEtYmVhbnMtZGVtby1temJlbW1wOHNlLmRhdGFfYmVhbnNfY3VyYXRlZC5ldmVudGBcbiIsCiAgICAgICAgIldIRVJFIGV2ZW50X2RhdGUgPSBDVVJSRU5UX0RBVEUoKVxuIiwKICAgICAgICAiT1JERVIgQlkgZXZlbnRfaWQiCiAgICAgIF0KICAgIH0KICBdLAogICJtZXRhZGF0YSI6IHsKICAgICJjb2xhYiI6IHsKICAgICAgImNvbGxhcHNlZF9zZWN0aW9ucyI6IFsKICAgICAgICAiWnJRX2dPZWJSMnZYIgogICAgICBdLAogICAgICAibmFtZSI6ICJCaWdRdWVyeSB0YWJsZSIsCiAgICAgICJwcml2YXRlX291dHB1dHMiOiB0cnVlLAogICAgICAicHJvdmVuYW5jZSI6IFtdCiAgICB9LAogICAgImtlcm5lbHNwZWMiOiB7CiAgICAgICJkaXNwbGF5X25hbWUiOiAiUHl0aG9uIDMiLAogICAgICAibmFtZSI6ICJweXRob24zIgogICAgfSwKICAgICJsYW5ndWFnZV9pbmZvIjogewogICAgICAibmFtZSI6ICJweXRob24iCiAgICB9CiAgfSwKICAibmJmb3JtYXQiOiA0LAogICJuYmZvcm1hdF9taW5vciI6IDAKfQo="}}}}